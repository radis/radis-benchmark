{"project": "radis", "project_url": "https://github.com/radis/radis-benchmark", "show_commit_url": "http://github.com/radis/radis/commit/", "hash_length": 8, "revision_to_hash": {"53": "45f97643f6cefb4bc48dbf2b87f9ad9e8ca11fae", "64": "fdfe154532f55df5cf23f3deac04a9a580346a2e", "80": "d17fb51b4338d32dd51c046cdffc17c571be2f19", "102": "c70c9ccc59424cb0e48782f181bcc168d1437b41", "135": "0eb9dfbe9fcd84143d6596d1498ac540d08d43bb", "199": "eb1c7c7774a265645ed8e6a90ca70ce89e71f696", "212": "022558771fc508effc909c63766b603042dc6ed5", "234": "aaaeebf4de3174629d57efaeb04412bd1578502d", "276": "989a63d2f2fd325830c4f6190c319983304feaed", "284": "cf5ba6bbb69cf39671e70797b9991631aed3de69", "307": "2d4a34f26f3285595fbc44ce7c0a5ee1e8f624c1", "317": "13b39eecb86c63f6334e414fb1bef881c9ea2eda", "319": "ceff4b66c9badc0d51e19ae2ecd382348504e8e0", "619": "010c9510fb8432f306ab4843b77cde0b5a50cd5f", "620": "f15a8b6fd29844aad6ce0d67573edbbf2ecc6012", "644": "38fffde923ac549a46447809ea0e4b20d415f708", "645": "7b86bf2d84a6436223ab78ab254201a7716913f5", "692": "ee83bfdb25a443b4f1a3f0f7a3bfdf46a0539a2c", "694": "9b9e9a8b93704350d3aa4aa198db955f4e3c2030", "695": "f1cc5cb9a8d39384c375b85d7168b5e001e07742", "785": "f4b027fd7c6e43674aed797df70e3a1c7ad300e5", "786": "378090689df81d56162b219ee6da2f76109975b9", "847": "965d2779808c5da966b15da02ba3e82a2822ab03", "853": "4a4c8833251e3d356efa172ab44d811a185e7bac", "1139": "35d8fb2cd6755e1fb07528ce69e29138e281abbd", "1216": "09636ce9a00f9d9b0250bd5ddc82e0f7615b72d9", "1313": "2c60d354f96812f41b30ffc8e24ed0c3f5b062eb", "1410": "be8835ec0f9bebff34876aacce4241ee646ce89e"}, "revision_to_date": {"53": 1518275123000, "64": 1518459917000, "80": 1519008453000, "102": 1519208975000, "135": 1519946129000, "199": 1522009470000, "212": 1523280269000, "234": 1524876179000, "276": 1526920903000, "284": 1528817387000, "307": 1530213124000, "317": 1530892140000, "319": 1530896590000, "619": 1559160205000, "620": 1559160265000, "644": 1561478460000, "645": 1561478520000, "692": 1566317268000, "694": 1566318851000, "695": 1566318911000, "785": 1576228585000, "786": 1576228645000, "847": 1580942553000, "853": 1581090868000, "1139": 1606807961000, "1216": 1609795381000, "1313": 1612821151000, "1410": 1617871506000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i7-6700HQ CPU @ 2.50GHz (4 cores)"], "machine": ["ERWAN-XPS"], "num_cpu": ["4"], "os": ["Windows 10"], "ram": ["16GB"], "python": ["3.6", "3.8"], "Cython": ["", null], "psutil": ["", null], "branch": ["master", "support/0.9.18", "support/0.9.19", "support/0.9.21", "support/0.9.22"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6700HQ CPU @ 2.50GHz (4 cores)", "machine": "ERWAN-XPS", "num_cpu": "4", "os": "Windows 10", "ram": "16GB", "python": "3.8", "Cython": "", "psutil": "", "branch": "master"}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6700HQ CPU @ 2.50GHz (4 cores)", "machine": "ERWAN-XPS", "num_cpu": "4", "os": "Windows 10", "ram": "16GB", "python": "3.6", "branch": "master", "Cython": null, "psutil": null}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6700HQ CPU @ 2.50GHz (4 cores)", "machine": "ERWAN-XPS", "num_cpu": "4", "os": "Windows 10", "ram": "16GB", "python": "3.6", "branch": "support/0.9.22", "Cython": null, "psutil": null}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6700HQ CPU @ 2.50GHz (4 cores)", "machine": "ERWAN-XPS", "num_cpu": "4", "os": "Windows 10", "ram": "16GB", "python": "3.8", "Cython": "", "psutil": "", "branch": "support/0.9.22"}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6700HQ CPU @ 2.50GHz (4 cores)", "machine": "ERWAN-XPS", "num_cpu": "4", "os": "Windows 10", "ram": "16GB", "python": "3.6", "branch": "support/0.9.19", "Cython": null, "psutil": null}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6700HQ CPU @ 2.50GHz (4 cores)", "machine": "ERWAN-XPS", "num_cpu": "4", "os": "Windows 10", "ram": "16GB", "python": "3.8", "Cython": "", "psutil": "", "branch": "support/0.9.19"}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6700HQ CPU @ 2.50GHz (4 cores)", "machine": "ERWAN-XPS", "num_cpu": "4", "os": "Windows 10", "ram": "16GB", "python": "3.6", "branch": "support/0.9.21", "Cython": null, "psutil": null}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6700HQ CPU @ 2.50GHz (4 cores)", "machine": "ERWAN-XPS", "num_cpu": "4", "os": "Windows 10", "ram": "16GB", "python": "3.6", "branch": "support/0.9.18", "Cython": null, "psutil": null}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6700HQ CPU @ 2.50GHz (4 cores)", "machine": "ERWAN-XPS", "num_cpu": "4", "os": "Windows 10", "ram": "16GB", "python": "3.8", "Cython": "", "psutil": "", "branch": "support/0.9.18"}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6700HQ CPU @ 2.50GHz (4 cores)", "machine": "ERWAN-XPS", "num_cpu": "4", "os": "Windows 10", "ram": "16GB", "python": "3.8", "Cython": "", "psutil": "", "branch": "support/0.9.21"}], "benchmarks": {"LineOfSight.LineOfSight_Benchmark.peakmem_SerialSlabs": {"code": "class LineOfSight_Benchmark:\n    def peakmem_SerialSlabs(self):\n    \n        SerialSlabs(*self.s_list, modify_inputs=False)  # modify_inputs=True)\n\n    def setup(self):\n    \n        s = calc_spectrum(1900, 2300,         # cm-1\n                          molecule='CO',\n                          isotope='1,2,3',\n                          pressure=1.01325,   # bar\n                          Tgas=700,           # K\n                          mole_fraction=0.1,\n                          path_length=1,      # cm\n                          wstep=0.01,\n                          verbose=False,\n                          )\n        self.s_list =  [s.copy()]*100", "name": "LineOfSight.LineOfSight_Benchmark.peakmem_SerialSlabs", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "0204d26f3ceebc4191aba1ca61dfce49cc30b921d0717160535c2afd3fe4a41c"}, "LineOfSight.LineOfSight_Benchmark.time_SerialSlabs": {"code": "class LineOfSight_Benchmark:\n    def time_SerialSlabs(self):\n    \n        SerialSlabs(*self.s_list, modify_inputs=False)  # modify_inputs=True\n\n    def setup(self):\n    \n        s = calc_spectrum(1900, 2300,         # cm-1\n                          molecule='CO',\n                          isotope='1,2,3',\n                          pressure=1.01325,   # bar\n                          Tgas=700,           # K\n                          mole_fraction=0.1,\n                          path_length=1,      # cm\n                          wstep=0.01,\n                          verbose=False,\n                          )\n        self.s_list =  [s.copy()]*100", "min_run_count": 2, "name": "LineOfSight.LineOfSight_Benchmark.time_SerialSlabs", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "cf2a641fbdb9fca3e7dfd062e90d2d5fa8a9092f6e6030eef4d0dbdc93b6f7e6", "warmup_time": -1}, "benchmarks.CO2_HITEMP.peakmem_eq_spectrum": {"code": "class CO2_HITEMP:\n    def peakmem_eq_spectrum(self):\n        opt = self.test_options\n        sf = SpectrumFactory(\n            **{\n                k: opt[k]\n                for k in [\n                    \"wavenum_min\",\n                    \"wavenum_max\",\n                    \"molecule\",\n                    \"isotope\",\n                    \"wstep\",\n                    \"cutoff\",\n                    \"verbose\",\n                    \"chunksize\",\n                ]\n            }\n        )\n        sf.load_databank(\n            path=opt[\"path\"],\n            format=opt[\"dbformat\"],\n            parfuncfmt=\"hapi\",\n            levelsfmt=\"radis\",\n        )\n        assert len(sf.df0) == 1487308  # number of lines\n        sf.eq_spectrum(Tgas=1700)\n\n    def setup(self):\n        self.test_options = opt = {\n            \"wavenum_min\": 2000,\n            \"wavenum_max\": 2250,\n            \"molecule\": \"CO2\",\n            \"isotope\": \"1,2,3\",\n            \"verbose\": 3,\n            \"wstep\": 0.01,\n            \"cutoff\": 0,\n            \"chunksize\": \"auto\",\n            \"broadening_max_width\": 10,\n            \"path\": [\n                r\"D:\\Dropbox\\Data ECP\\14_Databases\\CDSD-HITEMP\\cdsd_hitemp_07\",\n                r\"D:\\Dropbox\\Data ECP\\14_Databases\\CDSD-HITEMP\\cdsd_hitemp_08\",\n                r\"D:\\Dropbox\\Data ECP\\14_Databases\\CDSD-HITEMP\\cdsd_hitemp_09\",\n            ],\n            \"use_cached\": True,\n            \"dbformat\": \"cdsd-hitemp\",\n        }\n    \n        # Chunksize : number of lines to proceed at the same time (doestn apply if LDM)\n        if opt[\"chunksize\"] == \"auto\":\n            opt[\"chunksize\"] = digits(\n                virtual_memory().available\n                / sys.getsizeof(\n                    _generate_broadening_range(\n                        opt[\"wstep\"], opt[\"broadening_max_width\"]\n                    )\n                ),\n                n=1,\n            )\n            printm(\"chunksize auto : \", opt[\"chunksize\"])\n    \n        # Backward compatibility\n        # ----------------------\n    \n        # Old version of RADIS do not necessary work with the latest parameters\n        # Fix it :\n        version = get_version(add_git_number=False)\n        if version < \"0.9.21\":\n            opt[\"dbformat\"] = \"cdsd\"\n    \n        # Also fix problems with cache files :\n    \n        # First run to check there are no problems with Line database cache-files\n        # ... Note @dev : as of 0.9.26 encountering a cache file generated with a future version\n        # ... raises an error with no option to automatically regenerate the cache file\n        sf = SpectrumFactory(\n            **{\n                k: opt[k]\n                for k in [\n                    \"wavenum_min\",\n                    \"wavenum_max\",\n                    \"molecule\",\n                    \"isotope\",\n                    \"wstep\",\n                    \"cutoff\",\n                    \"verbose\",\n                ]\n            }\n        )\n    \n        for attempt in range(15):  # max number of failed cache files\n            try:\n                sf.load_databank(\n                    path=opt[\"path\"],\n                    format=opt[\"dbformat\"],\n                    parfuncfmt=\"hapi\",\n                    levelsfmt=\"radis\",\n                )\n            except ValueError as err:\n                if \"generated with a future version\" in str(err):\n                    # Get failing cache file :\n                    fcache = re.search(\n                        r\"(?<=Cache file \\().*(?=\\) generated)\", str(err)\n                    )\n                    if fcache is not None:\n                        fcache = fcache.group()\n                        printm(\n                            \"Backward compatibility : regenerating cache file\",\n                            fcache,\n                        )\n                        os.remove(fcache)\n                        continue\n                raise\n            else:\n                break", "name": "benchmarks.CO2_HITEMP.peakmem_eq_spectrum", "param_names": [], "params": [], "timeout": 3600, "type": "peakmemory", "unit": "bytes", "version": "3126562e1840840f6d1d6c10d38f144f40ac7d5d95813142aca0d8072975aa40"}, "benchmarks.CO2_HITEMP.peakmem_noneq_spectrum": {"code": "class CO2_HITEMP:\n    def peakmem_noneq_spectrum(self):\n        opt = self.test_options\n        sf = SpectrumFactory(\n            **{\n                k: opt[k]\n                for k in [\n                    \"wavenum_min\",\n                    \"wavenum_max\",\n                    \"molecule\",\n                    \"isotope\",\n                    \"wstep\",\n                    \"cutoff\",\n                    \"verbose\",\n                    \"chunksize\",\n                ]\n            }\n        )\n        sf.load_databank(\n            path=opt[\"path\"],\n            format=opt[\"dbformat\"],\n            parfuncfmt=\"hapi\",\n            levelsfmt=\"radis\",\n        )\n        assert len(sf.df0) == 1487308  # number of lines\n        sf.non_eq_spectrum(Ttrans=300, Tvib=1700, Trot=1550)\n\n    def setup(self):\n        self.test_options = opt = {\n            \"wavenum_min\": 2000,\n            \"wavenum_max\": 2250,\n            \"molecule\": \"CO2\",\n            \"isotope\": \"1,2,3\",\n            \"verbose\": 3,\n            \"wstep\": 0.01,\n            \"cutoff\": 0,\n            \"chunksize\": \"auto\",\n            \"broadening_max_width\": 10,\n            \"path\": [\n                r\"D:\\Dropbox\\Data ECP\\14_Databases\\CDSD-HITEMP\\cdsd_hitemp_07\",\n                r\"D:\\Dropbox\\Data ECP\\14_Databases\\CDSD-HITEMP\\cdsd_hitemp_08\",\n                r\"D:\\Dropbox\\Data ECP\\14_Databases\\CDSD-HITEMP\\cdsd_hitemp_09\",\n            ],\n            \"use_cached\": True,\n            \"dbformat\": \"cdsd-hitemp\",\n        }\n    \n        # Chunksize : number of lines to proceed at the same time (doestn apply if LDM)\n        if opt[\"chunksize\"] == \"auto\":\n            opt[\"chunksize\"] = digits(\n                virtual_memory().available\n                / sys.getsizeof(\n                    _generate_broadening_range(\n                        opt[\"wstep\"], opt[\"broadening_max_width\"]\n                    )\n                ),\n                n=1,\n            )\n            printm(\"chunksize auto : \", opt[\"chunksize\"])\n    \n        # Backward compatibility\n        # ----------------------\n    \n        # Old version of RADIS do not necessary work with the latest parameters\n        # Fix it :\n        version = get_version(add_git_number=False)\n        if version < \"0.9.21\":\n            opt[\"dbformat\"] = \"cdsd\"\n    \n        # Also fix problems with cache files :\n    \n        # First run to check there are no problems with Line database cache-files\n        # ... Note @dev : as of 0.9.26 encountering a cache file generated with a future version\n        # ... raises an error with no option to automatically regenerate the cache file\n        sf = SpectrumFactory(\n            **{\n                k: opt[k]\n                for k in [\n                    \"wavenum_min\",\n                    \"wavenum_max\",\n                    \"molecule\",\n                    \"isotope\",\n                    \"wstep\",\n                    \"cutoff\",\n                    \"verbose\",\n                ]\n            }\n        )\n    \n        for attempt in range(15):  # max number of failed cache files\n            try:\n                sf.load_databank(\n                    path=opt[\"path\"],\n                    format=opt[\"dbformat\"],\n                    parfuncfmt=\"hapi\",\n                    levelsfmt=\"radis\",\n                )\n            except ValueError as err:\n                if \"generated with a future version\" in str(err):\n                    # Get failing cache file :\n                    fcache = re.search(\n                        r\"(?<=Cache file \\().*(?=\\) generated)\", str(err)\n                    )\n                    if fcache is not None:\n                        fcache = fcache.group()\n                        printm(\n                            \"Backward compatibility : regenerating cache file\",\n                            fcache,\n                        )\n                        os.remove(fcache)\n                        continue\n                raise\n            else:\n                break", "name": "benchmarks.CO2_HITEMP.peakmem_noneq_spectrum", "param_names": [], "params": [], "timeout": 3600, "type": "peakmemory", "unit": "bytes", "version": "78d31759f610c38736d5f20e82cbf623fca0e33ae5871a6d5b0e744c8b08e35e"}, "benchmarks.CO2_HITEMP.time_eq_spectrum": {"code": "class CO2_HITEMP:\n    def time_eq_spectrum(self):\n        # Note @ dev:  can't use calc_spectrum directly because it cannot\n        # read a custom database\n        opt = self.test_options\n    \n        sf = SpectrumFactory(\n            **{\n                k: opt[k]\n                for k in [\n                    \"wavenum_min\",\n                    \"wavenum_max\",\n                    \"molecule\",\n                    \"isotope\",\n                    \"wstep\",\n                    \"cutoff\",\n                    \"verbose\",\n                    \"chunksize\",\n                ]\n            }\n        )\n        sf.load_databank(\n            path=opt[\"path\"],\n            format=opt[\"dbformat\"],\n            parfuncfmt=\"hapi\",\n            levelsfmt=\"radis\",\n        )\n        assert len(sf.df0) == 1487308  # number of lines\n        sf.eq_spectrum(Tgas=1700)\n\n    def setup(self):\n        self.test_options = opt = {\n            \"wavenum_min\": 2000,\n            \"wavenum_max\": 2250,\n            \"molecule\": \"CO2\",\n            \"isotope\": \"1,2,3\",\n            \"verbose\": 3,\n            \"wstep\": 0.01,\n            \"cutoff\": 0,\n            \"chunksize\": \"auto\",\n            \"broadening_max_width\": 10,\n            \"path\": [\n                r\"D:\\Dropbox\\Data ECP\\14_Databases\\CDSD-HITEMP\\cdsd_hitemp_07\",\n                r\"D:\\Dropbox\\Data ECP\\14_Databases\\CDSD-HITEMP\\cdsd_hitemp_08\",\n                r\"D:\\Dropbox\\Data ECP\\14_Databases\\CDSD-HITEMP\\cdsd_hitemp_09\",\n            ],\n            \"use_cached\": True,\n            \"dbformat\": \"cdsd-hitemp\",\n        }\n    \n        # Chunksize : number of lines to proceed at the same time (doestn apply if LDM)\n        if opt[\"chunksize\"] == \"auto\":\n            opt[\"chunksize\"] = digits(\n                virtual_memory().available\n                / sys.getsizeof(\n                    _generate_broadening_range(\n                        opt[\"wstep\"], opt[\"broadening_max_width\"]\n                    )\n                ),\n                n=1,\n            )\n            printm(\"chunksize auto : \", opt[\"chunksize\"])\n    \n        # Backward compatibility\n        # ----------------------\n    \n        # Old version of RADIS do not necessary work with the latest parameters\n        # Fix it :\n        version = get_version(add_git_number=False)\n        if version < \"0.9.21\":\n            opt[\"dbformat\"] = \"cdsd\"\n    \n        # Also fix problems with cache files :\n    \n        # First run to check there are no problems with Line database cache-files\n        # ... Note @dev : as of 0.9.26 encountering a cache file generated with a future version\n        # ... raises an error with no option to automatically regenerate the cache file\n        sf = SpectrumFactory(\n            **{\n                k: opt[k]\n                for k in [\n                    \"wavenum_min\",\n                    \"wavenum_max\",\n                    \"molecule\",\n                    \"isotope\",\n                    \"wstep\",\n                    \"cutoff\",\n                    \"verbose\",\n                ]\n            }\n        )\n    \n        for attempt in range(15):  # max number of failed cache files\n            try:\n                sf.load_databank(\n                    path=opt[\"path\"],\n                    format=opt[\"dbformat\"],\n                    parfuncfmt=\"hapi\",\n                    levelsfmt=\"radis\",\n                )\n            except ValueError as err:\n                if \"generated with a future version\" in str(err):\n                    # Get failing cache file :\n                    fcache = re.search(\n                        r\"(?<=Cache file \\().*(?=\\) generated)\", str(err)\n                    )\n                    if fcache is not None:\n                        fcache = fcache.group()\n                        printm(\n                            \"Backward compatibility : regenerating cache file\",\n                            fcache,\n                        )\n                        os.remove(fcache)\n                        continue\n                raise\n            else:\n                break", "min_run_count": 2, "name": "benchmarks.CO2_HITEMP.time_eq_spectrum", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "c04d70253a51eac629d2ebe9efebd7eac08efc04cebb14c0d2357f816c289e95", "warmup_time": -1}, "benchmarks.CO2_HITEMP.time_noneq_spectrum": {"code": "class CO2_HITEMP:\n    def time_noneq_spectrum(self):\n        # Note @ dev:  can't use calc_spectrum directly because it cannot\n        # read a custom database\n        opt = self.test_options\n        sf = SpectrumFactory(\n            **{\n                k: opt[k]\n                for k in [\n                    \"wavenum_min\",\n                    \"wavenum_max\",\n                    \"molecule\",\n                    \"isotope\",\n                    \"wstep\",\n                    \"cutoff\",\n                    \"verbose\",\n                    \"chunksize\",\n                ]\n            }\n        )\n        sf.load_databank(\n            path=opt[\"path\"],\n            format=opt[\"dbformat\"],\n            parfuncfmt=\"hapi\",\n            levelsfmt=\"radis\",\n        )\n        assert len(sf.df0) == 1487308  # number of lines\n        sf.non_eq_spectrum(Ttrans=300, Tvib=1700, Trot=1550)\n\n    def setup(self):\n        self.test_options = opt = {\n            \"wavenum_min\": 2000,\n            \"wavenum_max\": 2250,\n            \"molecule\": \"CO2\",\n            \"isotope\": \"1,2,3\",\n            \"verbose\": 3,\n            \"wstep\": 0.01,\n            \"cutoff\": 0,\n            \"chunksize\": \"auto\",\n            \"broadening_max_width\": 10,\n            \"path\": [\n                r\"D:\\Dropbox\\Data ECP\\14_Databases\\CDSD-HITEMP\\cdsd_hitemp_07\",\n                r\"D:\\Dropbox\\Data ECP\\14_Databases\\CDSD-HITEMP\\cdsd_hitemp_08\",\n                r\"D:\\Dropbox\\Data ECP\\14_Databases\\CDSD-HITEMP\\cdsd_hitemp_09\",\n            ],\n            \"use_cached\": True,\n            \"dbformat\": \"cdsd-hitemp\",\n        }\n    \n        # Chunksize : number of lines to proceed at the same time (doestn apply if LDM)\n        if opt[\"chunksize\"] == \"auto\":\n            opt[\"chunksize\"] = digits(\n                virtual_memory().available\n                / sys.getsizeof(\n                    _generate_broadening_range(\n                        opt[\"wstep\"], opt[\"broadening_max_width\"]\n                    )\n                ),\n                n=1,\n            )\n            printm(\"chunksize auto : \", opt[\"chunksize\"])\n    \n        # Backward compatibility\n        # ----------------------\n    \n        # Old version of RADIS do not necessary work with the latest parameters\n        # Fix it :\n        version = get_version(add_git_number=False)\n        if version < \"0.9.21\":\n            opt[\"dbformat\"] = \"cdsd\"\n    \n        # Also fix problems with cache files :\n    \n        # First run to check there are no problems with Line database cache-files\n        # ... Note @dev : as of 0.9.26 encountering a cache file generated with a future version\n        # ... raises an error with no option to automatically regenerate the cache file\n        sf = SpectrumFactory(\n            **{\n                k: opt[k]\n                for k in [\n                    \"wavenum_min\",\n                    \"wavenum_max\",\n                    \"molecule\",\n                    \"isotope\",\n                    \"wstep\",\n                    \"cutoff\",\n                    \"verbose\",\n                ]\n            }\n        )\n    \n        for attempt in range(15):  # max number of failed cache files\n            try:\n                sf.load_databank(\n                    path=opt[\"path\"],\n                    format=opt[\"dbformat\"],\n                    parfuncfmt=\"hapi\",\n                    levelsfmt=\"radis\",\n                )\n            except ValueError as err:\n                if \"generated with a future version\" in str(err):\n                    # Get failing cache file :\n                    fcache = re.search(\n                        r\"(?<=Cache file \\().*(?=\\) generated)\", str(err)\n                    )\n                    if fcache is not None:\n                        fcache = fcache.group()\n                        printm(\n                            \"Backward compatibility : regenerating cache file\",\n                            fcache,\n                        )\n                        os.remove(fcache)\n                        continue\n                raise\n            else:\n                break", "min_run_count": 2, "name": "benchmarks.CO2_HITEMP.time_noneq_spectrum", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 3600, "type": "time", "unit": "seconds", "version": "03caff8e0f0abfa9160055542429c50787e85a08cf4844940abdb47a6ef409d7", "warmup_time": -1}, "benchmarks.CO2_HITRAN.peakmem_noneq_spectrum": {"code": "class CO2_HITRAN:\n    def peakmem_noneq_spectrum(self):\n    \n        calc_spectrum(**self.test_options)\n\n    def setup(self):\n        self.test_options = opt = {\n            \"wavelength_min\": 4165,\n            \"wavelength_max\": 4200,\n            \"databank\": \"fetch\",  # not appropriate for these temperatures, but convenient for automatic testing\n            \"Tgas\": 300,\n            \"Tvib\": 1700,\n            \"Trot\": 1550,\n            \"path_length\": 0.1,\n            \"mole_fraction\": 0.5,\n            \"molecule\": \"CO2\",\n            \"isotope\": \"1,2\",\n            \"wstep\": 0.01,\n            \"cutoff\": 1e-25,\n            \"use_cached\": True,\n            \"medium\": \"vacuum\",\n            \"optimization\": \"simple\",\n            \"export_lines\": False,\n            \"warnings\": {\n                \"MissingSelfBroadeningWarning\": \"ignore\",\n                \"NegativeEnergiesWarning\": \"ignore\",\n                \"HighTemperatureWarning\": \"ignore\",\n            },\n        }\n    \n        # Backward compatibility\n        # ----------------------\n    \n        # Old version of RADIS do not necessary work with the latest parameters\n        # Fix it :\n        version = get_version(add_git_number=False)\n        if version < \"0.9.26\":\n            del self.test_options[\"optimization\"]\n    \n        # Also fix problems with cache files :\n    \n        # First run to check there are no problems with Line database cache-files\n        # ... Note @dev : as of 0.9.26 encountering a cache file generated with a future version\n        # ... raises an error with no option to automatically regenerate the cache file\n        sf = SpectrumFactory(\n            **{\n                k: v\n                for (k, v) in opt.items()\n                if k\n                in [\n                    \"wavelength_min\",\n                    \"wavelength_max\",\n                    \"molecule\",\n                    \"isotope\",\n                    \"broadening_max_width\",\n                    \"medium\",\n                ]\n            }\n        )\n    \n        for attempt in range(15):  # max number of failed cache files\n            try:\n                sf.fetch_databank()\n            except ValueError as err:\n                if \"generated with a future version\" in str(err):\n                    # Get failing cache file :\n                    fcache = re.search(\n                        r\"(?<=Cache file \\().*(?=\\) generated)\", str(err)\n                    )\n                    if fcache is not None:\n                        fcache = fcache.group()\n                        printm(\n                            \"Backward compatibility : regenerating cache file\",\n                            fcache,\n                        )\n                        os.remove(fcache)\n                        continue\n                raise\n            else:\n                break", "name": "benchmarks.CO2_HITRAN.peakmem_noneq_spectrum", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "916c8904c8e0a3fb3df5f8409e4863a3aab836087c2fc12bec02890165ac3174"}, "benchmarks.CO2_HITRAN.time_noneq_spectrum": {"code": "class CO2_HITRAN:\n    def time_noneq_spectrum(self):\n    \n        calc_spectrum(**self.test_options)\n\n    def setup(self):\n        self.test_options = opt = {\n            \"wavelength_min\": 4165,\n            \"wavelength_max\": 4200,\n            \"databank\": \"fetch\",  # not appropriate for these temperatures, but convenient for automatic testing\n            \"Tgas\": 300,\n            \"Tvib\": 1700,\n            \"Trot\": 1550,\n            \"path_length\": 0.1,\n            \"mole_fraction\": 0.5,\n            \"molecule\": \"CO2\",\n            \"isotope\": \"1,2\",\n            \"wstep\": 0.01,\n            \"cutoff\": 1e-25,\n            \"use_cached\": True,\n            \"medium\": \"vacuum\",\n            \"optimization\": \"simple\",\n            \"export_lines\": False,\n            \"warnings\": {\n                \"MissingSelfBroadeningWarning\": \"ignore\",\n                \"NegativeEnergiesWarning\": \"ignore\",\n                \"HighTemperatureWarning\": \"ignore\",\n            },\n        }\n    \n        # Backward compatibility\n        # ----------------------\n    \n        # Old version of RADIS do not necessary work with the latest parameters\n        # Fix it :\n        version = get_version(add_git_number=False)\n        if version < \"0.9.26\":\n            del self.test_options[\"optimization\"]\n    \n        # Also fix problems with cache files :\n    \n        # First run to check there are no problems with Line database cache-files\n        # ... Note @dev : as of 0.9.26 encountering a cache file generated with a future version\n        # ... raises an error with no option to automatically regenerate the cache file\n        sf = SpectrumFactory(\n            **{\n                k: v\n                for (k, v) in opt.items()\n                if k\n                in [\n                    \"wavelength_min\",\n                    \"wavelength_max\",\n                    \"molecule\",\n                    \"isotope\",\n                    \"broadening_max_width\",\n                    \"medium\",\n                ]\n            }\n        )\n    \n        for attempt in range(15):  # max number of failed cache files\n            try:\n                sf.fetch_databank()\n            except ValueError as err:\n                if \"generated with a future version\" in str(err):\n                    # Get failing cache file :\n                    fcache = re.search(\n                        r\"(?<=Cache file \\().*(?=\\) generated)\", str(err)\n                    )\n                    if fcache is not None:\n                        fcache = fcache.group()\n                        printm(\n                            \"Backward compatibility : regenerating cache file\",\n                            fcache,\n                        )\n                        os.remove(fcache)\n                        continue\n                raise\n            else:\n                break", "min_run_count": 2, "name": "benchmarks.CO2_HITRAN.time_noneq_spectrum", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a6c371c3e00b6e87d3ef11ac90bc34ac4802ed49a0dc64b836f61e058ec345e7", "warmup_time": -1}}, "machines": {"ERWAN-XPS": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6700HQ CPU @ 2.50GHz (4 cores)", "machine": "ERWAN-XPS", "num_cpu": "4", "os": "Windows 10", "ram": "16GB", "version": 1}}, "tags": {"0.1.10": 199, "0.1.11": 212, "0.1.15": 234, "0.1.19": 276, "0.1.2": 53, "0.1.20": 284, "0.1.21": 307, "0.1.22": 317, "0.1.3": 64, "0.1.5": 80, "0.1.6": 102, "0.1.7": 135, "0.2.1": 319, "0.9.18": 619, "0.9.18b": 620, "0.9.19": 644, "0.9.19b": 645, "0.9.20": 692, "0.9.21": 694, "0.9.21b": 694, "0.9.22": 785, "0.9.22b": 786, "0.9.23": 847, "0.9.25": 853, "0.9.26": 1139, "0.9.27": 1216, "0.9.28": 1313, "0.9.29": 1410}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}